version: "3.7"

networks:
  dronenet:
    name: dronenet
# volumes:
#   portainerdata:
#     name: portainerdata

services:
  
  
  #gitea server
  gitea_server:
    image: ${GITEA_DOCKER_IMAGE}
    labels:
      - "traefik.http.routers.whoami.rule=Host(`git.zhangyongqiao.com`)"
    container_name: ${GITEA_SERVICE_DOMAIN}   
    ports:
      - ${GITEA_SSH_PORT_EXPOSE}:22
      - 3000:3000
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - APP_NAME=${GITEA_SERVICE_NAME}
      - RUN_MODE=prod
      - RUN_USER=git
      - SSH_DOMAIN=${GITEA_SERVICE_DOMAIN}
      - SSH_PORT=22
      - SSH_LISTEN_PORT=22
      - HTTP_PORT=3000
      - ROOT_URL=http://${GITEA_SERVICE_DOMAIN}
      - LFS_START_SERVER=true
      - REQUIRE_SIGNIN_VIEW=true
      - DB_TYPE=sqlite3 
      - INSTALL_LOCK=false
      - DISABLE_GRAVATAR=true
    networks:
      - dronenet
    restart: unless-stopped
    volumes:
      # 标准 Linux 系统下使用
      # - /etc/localtime:/etc/localtime:ro
      # - /etc/timezone:/etc/timezone:ro
      - ~/data/gitea_server/repositories:/data/git/repositories
      - ~/data/gitea_server/data:/data/gitea/
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    extra_hosts:
      - "${GITEA_SERVICE_DOMAIN}:127.0.0.1"


  # drone使用mysql
  drone_mysql:
    image: mysql
    restart: always
    container_name: drone_mysql
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    networks:
      dronenet:
    volumes:
      - ./drone_mysql/conf/my.cnf:/etc/mysql/my.cnf:rw
      - ~/data/drone_mysql/data:/var/lib/mysql/:rw
      - ~/data/drone_mysql/logs:/var/log/mysql/:rw

  # drone 服务端
  drone_server:
    image: ${DRONE_DOCKER_IMAGE}
    labels:
      - "traefik.http.routers.whoami.rule=Host(`drone.zhangyongqiao.com`)"
    container_name: drone_server
    ports:
      - 8888:80 # drone comtainer serves via port 80, we expose to end users via port 8381
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/data/drone_server/data:/data:rw
      - ~/data/drone_server/drone:/var/lib/drone:rw
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
    restart: always
    environment:
      # db Config
      - DRONE_DATABASE_DATASOURCE=${MYSQL_DATABASE}:${MYSQL_PASSWORD}@tcp(drone_mysql:3306)/drone?parseTime=true #mysql配置，要与上边mysql容器中的配置一致
      - DRONE_DATABASE_DRIVER=mysql

      - DRONE_TLS_AUTOCERT=false

      # gitea Config
      # - DRONE_AGENTS_ENABLED=true
      - DRONE_GITEA_SERVER=${GIT_SERVER} # this is internal communication with gitea server on the same network
      - DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}
      - DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET} #RPC秘钥
      - DRONE_SERVER_HOST=${DRONE_HOST}
      - DRONE_SERVER_PROTO=http
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_GIT_ALWAYS_AUTH=true
      - DRONE_USER_CREATE=username:${DRONE_ADMIN_USERNAME},admin:true #管理员账号，是你想要作为管理员的Gitea用户名
      # droneclient Config

      # dronelog
      - DRONE_LOGS_PRETTY=true
      - DRONE_LOGS_COLOR=true
      - DRONE_LOGS_TEXT=true
      - DRONE_LOGS_DEBUG=true
      - DRONE_LOGS_TRACE=true
    depends_on:
      - gitea_server
      - drone_mysql
    networks:
      dronenet:

  drone-runner:
    image: ${DRONE_RUNNER_DOCKER_IMAGE}
    labels:
      - "traefik.http.routers.dronerunner.rule=Host(`drone.zhangyongqiao.com`)"
    container_name: drone_runner
    expose:
      - 3000
    environment:
      - DRONE_GIT_ALWAYS_AUTH=true
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=${DRONE_HOST}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RUNNER_CAPACITY=${DRONE_RUNNER_CAPACITY}
    networks:
      - dronenet
    depends_on:
      - drone_server
      - drone_mysql
    restart: always
    volumes:
      # 标准 Linux 系统下使用
      # - /etc/localtime:/etc/localtime:ro
      # - /etc/timezone:/etc/timezone:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/data/drone_runner:/data
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    #extra_hosts:
    #  - "${SERVICE_DOMAIN}:127.0.0.1"

  # Redis服务
  service_redis:
    image: redis:latest
    container_name: redis_service
    restart: always
    ports:
      - 6379:6379
    networks:
      - dronenet
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:rw
      - ./data/redis:/data:rw
    command:
      /bin/bash -c "redis-server /usr/local/etc/redis/redis.conf "
  

  
  # docker-repo:
  #   image: ${DOCKER_REPO_DOCKER_IMAGE}
  #   container_name: docker_registry
  #   ports:
  #     - 5000:5000
  #   environment:
  #     - DRONE_RPC_PROTO=http
  #   networks:
  #     - dronenet
  #   depends_on:
  #     - drone_server
  #   restart: always
  #   volumes:
  #     # 标准 Linux 系统下使用
  #     # - /etc/localtime:/etc/localtime:ro
  #     # - /etc/timezone:/etc/timezone:ro
  #     - /data/docker/registry:/var/lib/registry
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "50m"
  #   #extra_hosts:
  #   #  - "${SERVICE_DOMAIN}:127.0.0.1"